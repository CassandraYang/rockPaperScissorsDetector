from cmu_graphics import *
import cv2
import numpy as np
from PIL import Image
import mediapipe as mp
from hand_recognition2 import Net
import torch
from torchvision import transforms
import random

class FaceDetector:
    def __init__(self) -> None:
        self.faceDetector = cv2.CascadeClassifier()
        self.faceDetector.load('haarcascade_frontalface_alt2.xml')
        lbfModelName = 'lbf_face_landmarks.yaml'
        self.landmarkDetector = cv2.face.createFacemarkLBF()
        self.landmarkDetector.loadModel(lbfModelName)
    
    def detect(self, image):
        detection = self.faceDetector.detectMultiScale(image)
        if detection is None or len(detection) == 0:
            return []
        _, landmarks = self.landmarkDetector.fit(cv2.cvtColor(image, cv2.COLOR_RGB2GRAY), detection)
        return np.concatenate(landmarks, axis = 0).astype(np.int64)

class HandDetector:
    def __init__(self) -> None:
        self.hands = mp.solutions.hands.Hands(static_image_mode = False, 
                                              max_num_hands = 2, 
                                              min_detection_confidence = 0.5)
    
    def detect(self, image):
        height, width = image.shape[:2]
        imgRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        landmarks = self.hands.process(imgRGB)
        if landmarks.multi_hand_landmarks is None:
            return np.array([])
        lms = np.array([[[lm.x * width, lm.y * height, lm.z] for lm in landmark.landmark] for landmark in landmarks.multi_hand_landmarks])
        return lms.astype(int)

class Eyes:
    def __init__(self, landmarks) -> None:
        self.leftEyePoints = landmarks[36:42]
        self.rightEyePoints = landmarks[42:48]

    def getPositionLeft(self):
        left, right = self.leftEyePoints[0][0], self.leftEyePoints[3][0]
        top, bottom = (self.leftEyePoints[1][1] + self.leftEyePoints[2][1])/2, (self.leftEyePoints[4][1] + self.leftEyePoints[4][1])/2
        centerX = (left + right)/2
        centerY = (top + bottom)/2
        width = right - left
        height = bottom - top
        return [int(centerX), int(centerY), int(width), int(height)]
    
    def getPositionRight(self):
        left, right = self.rightEyePoints[0][0], self.rightEyePoints[3][0]
        top, bottom = (self.rightEyePoints[1][1] + self.rightEyePoints[2][1])/2, (self.rightEyePoints[4][1] + self.rightEyePoints[4][1])/2
        centerX = (left + right)/2
        centerY = (top + bottom)/2
        width = right - left
        height = bottom - top
        return [int(centerX), int(centerY), int(width), int(height)]

class Mouth:
    def __init__(self, landmarks) -> None:
        self.landmarks = landmarks[48:60]
    
    def getPosition(self):
        left, right = self.landmarks[0][0], self.landmarks[6][0]
        top, bottom = (self.landmarks[2][1] + self.landmarks[4][1])/2, self.landmarks[9][1]
        centerX = (left + right)/2
        centerY = (top + bottom)/2
        width = right - left
        height = bottom - top
        return [int(centerX), int(centerY), int(width), int(height)]

class Nose:
    def __init__(self, landmarks) -> None:
        self.landmarks = landmarks[27:36]
    
    def getPosition(self):
        left, right = self.landmarks[4][0], self.landmarks[8][0]
        top, bottom = self.landmarks[0][1], self.landmarks[6][1]
        centerX = (left + right)/2
        centerY = (top + bottom)/2
        width = right - left
        height = bottom - top
        return [int(centerX), int(centerY), int(width), int(height)]

def onAppStart(app):
    openStream(app)
    updateImage(app)
    app.faceDetector = FaceDetector()
    app.handDetector = HandDetector()
    app.face = None
    app.eyes = []
    app.mouth = []
    app.nose = []
    app.googlyEyes = Image.open('googly_eye.png')
    app.smile = Image.open('smile_mouth.png')
    app.clown = Image.open('clown_nose.png')
    app.blinkTime = random.randrange(1, 50)
    app.step = 0
    app.gestureRecognizer = Net(4)
    app.gestureRecognizer.load_state_dict(torch.load('bn_hand_gesture_model_50.pt'))
    app.gestureRecognizer.eval()
    app.hand = None
    app.transformer = transforms.Compose([
                                    transforms.Grayscale(),
                                    transforms.Resize((128, 128)),
                                    transforms.ToTensor()
                                ])
    app.idToGesture = {0: 'None',
                       1: 'Paper',
                       2: 'Rock',
                       3: 'Scissor'}
    app.filter = 'googleEyes'
    
def redrawAll(app):
    # pil_image = Image.fromarray(app.image)
    image = CMUImage(app.pilImage)
    drawImage(image, 0, 0)
    # if app.face is not None:
    #     for i in range(len(app.face)): #Face
    #         for j in range(len(app.face[0])): #Point
    #             x, y = int(app.face[i][j][0]), int(app.face[i][j][1])
    #             drawCircle(x, y, 10, fill = 'white')
    #             drawLabel(str(j), x, y)
    if app.filter == 'googleEyes':
        googlyEyeFilter(app)
    elif app.filter == 'smile':
        smileFilter(app)
    elif app.filter == 'clown':
        clownFilter(app)
    if app.hand is not None:
        for i in range(len(app.hand)): #Hand
            # drawRect(app.leftX - 10, app.topY - 10, app.rightX - app.leftX + 20, app.bottomY - app.topY + 20, fill = None)
            # drawLine(int(app.hand[i][0][0]), int(app.hand[i][0][1]), int(app.hand[i][1][0]), int(app.hand[i][1][1]))
            # drawLine(int(app.hand[i][1][0]), int(app.hand[i][1][1]), int(app.hand[i][2][0]), int(app.hand[i][2][1]))
            # drawLine(int(app.hand[i][2][0]), int(app.hand[i][2][1]), int(app.hand[i][3][0]), int(app.hand[i][3][1]))
            # drawLine(int(app.hand[i][3][0]), int(app.hand[i][3][1]), int(app.hand[i][4][0]), int(app.hand[i][4][1]))
            # drawLine(int(app.hand[i][0][0]), int(app.hand[i][0][1]), int(app.hand[i][5][0]), int(app.hand[i][5][1]))
            # drawLine(int(app.hand[i][5][0]), int(app.hand[i][5][1]), int(app.hand[i][6][0]), int(app.hand[i][6][1]))
            # drawLine(int(app.hand[i][6][0]), int(app.hand[i][6][1]), int(app.hand[i][7][0]), int(app.hand[i][7][1]))
            # drawLine(int(app.hand[i][7][0]), int(app.hand[i][7][1]), int(app.hand[i][8][0]), int(app.hand[i][8][1]))
            # drawLine(int(app.hand[i][5][0]), int(app.hand[i][5][1]), int(app.hand[i][9][0]), int(app.hand[i][9][1]))
            # drawLine(int(app.hand[i][9][0]), int(app.hand[i][9][1]), int(app.hand[i][10][0]), int(app.hand[i][10][1]))
            # drawLine(int(app.hand[i][10][0]), int(app.hand[i][10][1]), int(app.hand[i][11][0]), int(app.hand[i][11][1]))
            # drawLine(int(app.hand[i][11][0]), int(app.hand[i][11][1]), int(app.hand[i][12][0]), int(app.hand[i][12][1]))
            # drawLine(int(app.hand[i][9][0]), int(app.hand[i][9][1]), int(app.hand[i][13][0]), int(app.hand[i][13][1]))
            # drawLine(int(app.hand[i][13][0]), int(app.hand[i][13][1]), int(app.hand[i][14][0]), int(app.hand[i][14][1]))
            # drawLine(int(app.hand[i][14][0]), int(app.hand[i][14][1]), int(app.hand[i][15][0]), int(app.hand[i][15][1]))
            # drawLine(int(app.hand[i][15][0]), int(app.hand[i][15][1]), int(app.hand[i][16][0]), int(app.hand[i][16][1]))
            # drawLine(int(app.hand[i][13][0]), int(app.hand[i][13][1]), int(app.hand[i][17][0]), int(app.hand[i][17][1]))
            # drawLine(int(app.hand[i][0][0]), int(app.hand[i][0][1]), int(app.hand[i][17][0]), int(app.hand[i][17][1]))
            # drawLine(int(app.hand[i][17][0]), int(app.hand[i][17][1]), int(app.hand[i][18][0]), int(app.hand[i][18][1]))
            # drawLine(int(app.hand[i][18][0]), int(app.hand[i][18][1]), int(app.hand[i][19][0]), int(app.hand[i][19][1]))
            # drawLine(int(app.hand[i][19][0]), int(app.hand[i][19][1]), int(app.hand[i][20][0]), int(app.hand[i][20][1]))
            drawLabel(app.position, app.width/2, 20, size = 20, bold = True)

def googlyEyeFilter(app):
    if app.eyes is not []:
        for i in range(len(app.eyes)):
            leftPositon = app.eyes[i].getPositionLeft()[:-2]
            leftWidth, leftHeight = app.eyes[i].getPositionLeft()[-2], app.eyes[i].getPositionLeft()[-1]
            googlyEye = app.googlyEyes.resize((leftWidth, leftWidth))
            draw = CMUImage(googlyEye)
            drawImage(draw, *leftPositon, align = 'center')
            rightPosition = app.eyes[i].getPositionRight()[:-2]
            rightWidth, rightHeight = app.eyes[i].getPositionRight()[-2], app.eyes[i].getPositionRight()[-1]
            googlyEye = app.googlyEyes.resize((rightWidth, rightWidth))
            draw = CMUImage(googlyEye)
            drawImage(draw, *rightPosition, align = 'center')

def smileFilter(app):
    if app.mouth is not []:
        for i in range(len(app.mouth)):
            position = app.mouth[i].getPosition()[:-2]
            width, height = app.mouth[i].getPosition()[-2], app.mouth[i].getPosition()[-1]
            smile = app.smile.resize((width + 20, height + 20))
            draw = CMUImage(smile)
            drawImage(draw, *position, align = 'center')

def clownFilter(app):
    if app.nose is not []:
        for i in range(len(app.mouth)):
            position = app.nose[i].getPosition()[:-2]
            width, height = app.nose[i].getPosition()[-2], app.nose[i].getPosition()[-1]
            clown = app.clown.resize((height, height))
            draw = CMUImage(clown)
            drawImage(draw, *position, align = 'center')

def onStep(app):
    app.step += 1
    updateImage(app)
    app.face = app.faceDetector.detect(app.image)
    app.eyes = []
    app.mouth = []
    app.nose = []
    for i in range(len(app.face)):
        app.eyes.append(Eyes(app.face[i]))
        app.mouth.append(Mouth(app.face[i]))
        app.nose.append(Nose(app.face[i]))
    if app.step % app.blinkTime == 0:
        app.googlyEyes = Image.open('googly_blink.png')
    elif app.step % app.blinkTime > 10:
        app.googlyEyes = Image.open('googly_eye.png')
        app.blinkTIme = random.randrange(1, 100)
    app.hand = app.handDetector.detect(app.image)
    if app.hand.size > 0:
        app.topY = float('inf')
        app.bottomY = 0
        app.rightX = 0
        app.leftX = float('inf')
        for i in range(len(app.hand)): #Hand
            for j in range(len(app.hand[0])): #Point
                x, y = int(app.hand[i][j][0]), int(app.hand[i][j][1])
                if x > app.rightX:
                    app.rightX = x
                if x < app.leftX:
                    app.leftX = x
                if y > app.bottomY:
                    app.bottomY = y
                if y < app.topY:
                    app.topY = y
        app.croppedImage = app.pilImage.crop((app.leftX - 10, app.topY - 10,app.rightX + 10, app.bottomY + 10))
        output = app.gestureRecognizer(app.transformer(app.croppedImage).unsqueeze(0))
        app.predictions = int(torch.argmax(output.data, 1))
        app.position = app.idToGesture[app.predictions]
        setFilter(app, app.predictions)

# def findPosition(landmarks):
#     maxY = 0
#     minY = float('inf')
#     maxX = 0
#     minX = float('inf')
#     for x, y, z in landmarks:
#         if y > maxY:
#             maxY = y
#         if y < minY:
#             minY = y
#         if x > maxX:
#             maxX = x
#         if x < minX:
#             minX = x
#     lengthHand = max(abs(maxY - minY), abs(maxX - minX))
#     lengthIndex = max(abs(landmarks[8][1] - landmarks[0][1]), abs(landmarks[8][0] - landmarks[0][0]))
#     lengthMiddle = max(abs(landmarks[12][1] - landmarks[0][1]), abs(landmarks[12][0] - landmarks[0][0]))
#     lengthRing = max(abs(landmarks[16][1] - landmarks[0][1]), abs(landmarks[16][0] - landmarks[0][0]))
#     lengthPinky = max(abs(landmarks[20][1] - landmarks[0][1]), abs(landmarks[20][0] - landmarks[0][0]))
#     lengthThumb = max(abs(landmarks[4][1] - landmarks[0][1]), abs(landmarks[4][0] - landmarks[0][0]))
#     if lengthIndex/lengthHand > 0.3 and lengthMiddle/lengthHand > 0.3 and lengthRing/lengthHand > 0.3 and lengthPinky/lengthHand > 0.3 and lengthThumb/lengthHand > 0.2:
#         return 1
#     elif lengthIndex/lengthHand > 0.3 and lengthMiddle/lengthHand > 0.3:
#         return 2
#     elif lengthIndex/lengthHand < 0.4 and lengthMiddle/lengthHand < 0.4 and lengthRing/lengthHand < 0.4 and lengthPinky/lengthHand < 0.4:
#         return 3
#     else:
#         return None

def setFilter(app, filter):
    if filter == 1: #paper
        app.filter = 'googleEyes'
    elif filter == 2: #rock
        app.filter = 'smile'
    elif filter == 3: #scissor
        app.filter = 'clown'

def onKeyPress(app, key):
    if key == 'q':
        app.quit()

def openStream(app):
    app.video = cv2.VideoCapture(0)
    if not app.video.isOpened():
        app.quit()
    app.width = int(app.video.get(cv2.CAP_PROP_FRAME_WIDTH))
    app.height = int(app.video.get(cv2.CAP_PROP_FRAME_HEIGHT))

def updateImage(app):
    success, image = app.video.read()
    if not success:
        app.quit()
    image = cv2.flip(image, 1)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    app.image = image
    app.pilImage = Image.fromarray(app.image)

def main():
    runApp()

main()